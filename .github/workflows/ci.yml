name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache
          key: cypress-cache-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}

      - uses: pnpm/action-setup@v2
        with:
          version: 7

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/
          cache: pnpm

      - run: pnpm install

      - name: Cypress PNPM Patch
        run: cp pnpm-lock.yaml package-lock.json

      - name: Run E2E tests
        uses: cypress-io/github-action@v5
        with:
          browser: chrome
          build: pnpm run build
          start: pnpx run test:e2e

      - name: Run unit tests
        uses: cypress-io/github-action@v5
        with:
          browser: chrome
          install: false
          component: true
          start: pnpx run test:unit
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        node_version: [16.x]
        os: [ubuntu-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 7

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: pnpm

      - name: Install
        run: pnpm i

      - name: Build
        run: pnpm run build -- --base="/${{ github.event.repository.name }}/"

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
  image:
    name: container image
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    env:
      IMAGE_NAME: ${{ github.repository }}
      REGISTRY: ghcr.io
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set image name to lowercase
        run: |
          echo "IMAGE_NAME_LC=${IMAGE_NAME,,}" >>${GITHUB_ENV}

      - name: Get the tag version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Buildah Action
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME_LC }}
          tags: latest ${{ github.sha }} ${{ steps.get_version.outputs.VERSION }}
          labels: |
            github.sha=${{ github.sha }}
            image.version=${{ steps.get_version.outputs.VERSION }}
          containerfiles: |
            ./Containerfile

      - name: Login into the GitHub container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub Container Repository
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.REGISTRY }}

      - name: Output container image URL
        run: echo "Image pushed to ${{ steps.push-to-ghcr.outputs.registry-paths }}"
  release:
    name: release
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: simple
          package-name: VTBox
          prerelease: true
          bump-minor-pre-major: true
          bump-patch-for-minor-pre-major: true
      - uses: actions/checkout@v3
      - name: tag stable versions
        if: ${{ steps.release.outputs.release_created }}
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git remote add gh-token "https://${{ secrets.GITHUB_TOKEN }}@github.com/google-github-actions/release-please-action.git"
          git tag -d stable || true
          git push origin :stable || true
          git tag -a stable -m "Last Stable Release"
          git push origin stable
